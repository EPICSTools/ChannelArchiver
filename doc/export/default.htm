<html>
<head>
<title>ArchiveExport</title>
<link REL="STYLESHEET" HREF="../style.css" TYPE="text/css">
</head>
<body background="../blueback.jpg">

<blockquote>
<h1>Archive Export</h1>
ArchiveExport is a command line tool for viewing archive data. It can
create files in spreadsheet, GNUplot and Matlab data formats.
It will display basic usage information when run without any
arguments:

<pre>
ArchiveExport 1.8.2

USAGE:  ArchiveExport [Options]  &lt;directory file&gt; { channel }

Options:
        -start &lt;time&gt;                  Format: "mm/dd/yy[ hh:mm:ss[.nano-secs]]"
        -end &lt;time&gt;                    (exclusive)
        -fill                          fill columns w/ repeated values
        -interpolate &lt;seconds&gt;         interpolate values
        -verbose                       verbose mode
        -gnuplot                       generate GNUPlot output
        -Gnuplot                       generate GNUPlot output for Image
        -pipe                          run GNUPlot via pipe
        -Matlab                        generate Matlap output
        -text                          include status information
        -output &lt;file&gt;                 output to file
        -match &lt;reg. exp.&gt;             channel name pattern
</pre>

In this example, 1.8.2 is the current version number. Details on
some of the other options:

<p><b>-start, -end</b><br>
This specifies the time stamp of the first and last requested
sample. Per default, all available values will be exported.
Note that the date and time have to match the given format.
The quotes are necessary so that the Unix shell or Win32 command tool
can pass the whole time stamp to the ArchiveExport program:
<br>
<pre>
$ArchiveExport -start "06/22/01 14:00:00" -stop "06/22/01 15:00:00" freq_directory fred
</pre>
With this example, ArchiveExport will export data from channel fred starting
on June 22, 2001 at 2 pm the data will end on the same day at 3:00 pm.
<br>
In reality you will always want to add "start" and "stop" options
to narrow down on the amount of data that you get.
In the following examples this is left off for brevity!

<p><b>-fill, -interpolate</b><br>
Staircase and linear interpolation as discussed in the
<a href="../retrieval/default.htm">retrieval overview</a>

<p><b>-Matlab</b><br>
Create data for Matlab. Both commands will export all
values for the channel "fred" into a file "data.m":
<pre>
ArchiveExport -Matlab -o data.m freq_directory fred
ArchiveExport -Matlab freq_directory fred >data.m
</pre>

<p><b>-gnuplot</b><br>
Create data for the gnuplot program.
You must specify an output file name with the "-o" option,
the result are two files:
<br>
<pre>ArchiveExport -gnuplot -o plotfile freq_directory fred</pre>
will create a data file "plotfile" and "plotfile.plt".
"plotfile" has the requested data, "plotfile.plt" is a configuration
for gnuplot.
To use this in gnuplot, use
<pre>gnuplot> load 'plotfile.plt'</pre>

<p><b>-Gnuplot</b><br>
This option is similar to the one above:
The created gnuplot command file will not show a plot on the screen
but create a .png image of the plot.
<br>
<pre>$ArchiveExport -Gnuplot -o plotfile freq_directory fred</pre>
will also create two files, "plotfile" and "plotfile.plt".
When you now run gnuplot:
<pre>gnuplot> load "plotfile.plt"</pre>
yet another file will be created called "plotfile.png".

<p><b>-pipe</b><br>
Skips the creation of the gnuplot command file.
Instead, ArchiveExport will create the data file and
then run gnuplot with the commands via a pipe.
<br>
<pre>$ArchiveExport -Gnuplot -o plotfile -pipe freq_directory fred</pre>
will create "plotfile" and run gnuplot with the command to create
an image file "plotfile.png".

</blockquote>

</body>
</html>
