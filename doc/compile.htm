<html>

<head>
<title>ChannelArchiver</title>
<link REL="STYLESHEET" HREF="style.css" TYPE="text/css">
</head>

<body BACKGROUND="blueback.jpg">

<blockquote>
  <h1>Compilation</h1>

  <h2>Compiler</h2>
  You need a C++ compiler that is up to the standard C++ library
  as defined in the 1997 Stroustrup C++ book.
  Usable are MS Visual C++ 6.0 and g++ 3.2 (as delivered with RedHat
  Linux 8.0).

  <h2>Configuration</h2>
  There are variables to be set in
  <ul>
  <li>Tools/ToolsConfig.h
  <li>ChannelArchiver/ArchiverConfig.h
  </ul>
  You have to read those header files in whole and hopefully the comments will
  help in deciding on the proper settings.<br>
  
  Unfortunately, C++ object files are rarely recognized by different compilers.
  This means that you have to compile <em>all</em> the C++ code with
  the <em>same compiler.</em>
  If you use g++ for the ChannelArchiver, the C++ parts of EPICS base
  have to be compiled with the same compiler (some files in base/src/libCom).
  Otherwise you'll see link errors like missing "epicsTime" classes.
 
  <h2>Make system</h2>
  Most parts of the ChannelArchiver use the standard EPICS make system
  for extensions (Makefile, Makefile.Host).
  This allows building for WIN32 and UNIX.
  The master ChannelArchiver/Makefile will build the Tools &amp;
  LibIO libraries first, then Manager, ..., Engine.
  <br>
  Because the ChannelArchiver uses files in the Tools directory,
  it should be parallel to the ChannelArchiver tree like this:
  <ul>
    <li>...../extensions/config</li>
    <li>...../extensions/src/Tools</li>
    <li>...../extensions/src/ChannelArchiver</li>
    <li>...../extensions/src/ChannelArchiver/LibIO</li>
    <li>...../extensions/src/ChannelArchiver/Engine</li>
    <li>...</li>
  </ul>
  Neither the name &quot;extensions&quot; nor &quot;src&quot;
  is imperative here. The point is that relative to ChannelArchiver
  there are ../Tools and ../../config directories.
  If your setup is different, you will have to change the makefiles.

  <h3>CGIExport</h3>
  The CGIExport tool is meant to be called from the web server.
  <B>IF</B> your EPICS make system is setup to build the EPICS base
  libraries as shared libraries, this is unfortunate because then
  LD_LIBRARY_PATH might have to be adjusted so that the web server can
  find the shared libraries (Com, ca), which is not easy to do in
  general.
  <br>
  Alternatively, change the make system to not use shared libraries or
  watch the make system as it builds CGIExport. Spot the section where
  it links CGIExport, copy that out and write your own command line
  where you link the static libraries instead of the shared
  ones. Example: Replace the -lCom arguement with  the full path to
  the static library ala ....../base/lib/Linux/libCom.a.
  CCGIExport/link.sh is one example that works for me on Linux.

  <h3>WinBrowser</h3>
  For the Winbrowser, only MS Visual C++ project files are included
  because this tool is not portable to Unix.

  <h3>CASI</h3>
  For CASI, a Makefile.Win32 and Makefile.Unix is included
  because the EPICS make-system doesn't handle SWIG
  and the various supported scripting languages.

  <h2>MS Visual C++ specials</h2>
  One can compile with MS Visual C++ in the same way as EPICS base
  gets compiled, using GNUmake-Makefiles and perl.
  This is the preferred method!<br>
  In addition, some MS Visual C++ project files are included but those
  are mostly for development purposes.

</blockquote>
</body>
</html>


