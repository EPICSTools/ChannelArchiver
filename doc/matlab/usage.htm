<html>

<head>
<title>Matlab Support</title>
<link REL="STYLESHEET" HREF="../style.css" TYPE="text/css">
</head>

<body BACKGROUND="../blueback.jpg">

<blockquote>
  <h1>Matlab and ChannelArchiver Data</h1>
  As a result of exporting data from the WinBrowser or
  other ChannelArchiver tools, a Matlab command file is generated.
  When using the CGIExport web interface, you can download
  such a command file and save it to the local disk.
  Is should be saved under a name with the ".m" extension,
  for example "archive_data.m" so that Matlab
  recognizes it via the dot-m ending.
  <br>
  Within Matlab, change the current directory to where
  the this file was saved/created and execute it
  by typing "archive_data" or whatever name you chose
  for the data file.
  Now the exported data is available within Matlab.
  To be of any use, you have to understand how this data
  is formatted.

  <h2>Matlab Command File</h2>
  The file that's created is an <i>ASCII command file</i>.
  It is neither a data file nor a binary file
  in order to be most portable.
  The first few lines in this command file are actually comments,
  providing a brief description of the format.
  Matlab can read and execute this file format:
  Run Matlab, cd to where the file is and type
  the file name (without the .m ending). As a result, one structure
  per channel is available in Matlab. The channel name equals the
  structure name. You can now use Matlab to modify the data, plot it, ...

  <h2>Structure Format</h2>
  For each channel, a structure with these elements is created:
  <ul>
  <li>t - time string
  <li>v - value
  <li>s - status      
  <li>d - date number
  <li>l - length of data
  <li>n - name
  </ul>

  Example:
  <pre>
  fred.t(1)={'03/22/2000 17:02:28.700986000'};
  fred.v(1)=0.0718;
  fred.s(228)={''};
  ...
  fred.t(228)={'03/22/2000 17:10:10.231108000;'};
  fred.v(228)=nan;
  fred.s(228)={'Archive_Off'};
  ...
  fred.d=datenum(char(fred.t));
  fred.l=size(fred.v,2);
  fred.n='fred';
  </pre>

  The t field contains the full time information from the archive.
  This can rarely be used in Matlab as is, however,
  so it's converted into a Matlab
  date/time number (supported since at least MatLab V.4.2).
  <br>
  The l and n fields allow the definition of generic Matlab functions,
  see the following examples.

  <h2>Matlab Examples</h2>
  These are generic Matlab scripts that usually accept
  one or more archive data structures as arguments:
  <ul>
  <li><a href="archdataplot.m">Plot one channel over time</a>
  <li><a href="archdataplot2.m">Plot two channels over time, different
      axes</a>
  <li><a href="xyplot.m">X/Y Plot: plot X vs. Y over time</a>
  <li><a href="water.m">Waterfall: plot several channels over time</a>
  <li><a href="show_fft.m">How to show raw data, fft and comments in
  the same plot</a>
  </ul>

  <h2>Design Decisions</h2>
  There are several options for exporting data to Matlab.
  The described one offers:
  <pre>
  + Human readable
  + comments can be included
  + full archive information
  + no Matlab libraries required
  - slow
  </pre>
  
  It is slow because Matlab has to interpret and execute
  the commands in the file.
  After that, you can use the Matlab "save" command to create a binary Matlab
  data file. This binary file usually loads faster, but it is specific
  to your version of Matlab, it might also be bigger, which is why the
  ChannelArchiver tools do not directly create such a binary data file.
  <br>
  In one example, the original command file had a size of
  90kB and the corresponding binary data file was 174kB.
  Loading (=executing) the command file took about 5 seconds,
  while the binary data file loads in virtually no time.
  A Matlab profile of the command file reveals that 90%
  of the time were spent in <i>datenum</i> calls.

  <p>
  The most interesting part is the handling of time/date.
  <br>
  From what I understand, Chris Larrieu @ JLab implemented this
  format:
  <pre>
     start, end time  - string

     channel data: one array for the values,
                   another array with a normalized time number, meaning:
                   0.0  == start time
                   1.0  == end time.
  </pre>
  This format, then written in binary format, offers:
  <pre>
  + speed
  + bigger?
  - not easily Human readable, especially the time stamp
    is now channel specific, relative to the start and end time
    chosen for this export run
  - no comments
  - might require Matlab libraries
  </pre>
</blockquote>
</body>
</html>
