<html>

<head>
<title>Matlab Support</title>
<link REL="STYLESHEET" HREF="../style.css" TYPE="text/css">
</head>

<body BACKGROUND="../blueback.jpg">

<blockquote>
  <h1>Matlab Support</h1>

  The ChannelArchiver LibIO provides a MatlabExporter class.
  It's used by e.g. the command-line ArchiveExport, the WinBrowser
  tool as well as the CGIExport tool.
  <br>
  For casi there is a ml_dump.pl perl script that generates the same
  output format.

  <h2>Matlab Command File</h2>
  The file that's created is an <i>ASCII command file</i> which
  Matlab can read (at least since version 4.2).
  It's not a data file, it's not a binary file,
  in order to be most portable and not require Matlab libraries
  for compiling the ChannelArchiver.
  <br>
  When the command file is saved, Matlab can execute it
  (run Matlab, cd to where the file is and type its name).
  As a result a structure is available in Matlab for each channel.
  The channel name equals the structure name.
  <br>
  You can then use the Matlab "save" command to create a more
  compact binary data file, modify the data, plot it, ...

  <h2>Structure Format</h2>

  For each channel, a structure with these elements is created:
  <ul>
  <li>t - time string
  <li>v - value
  <li>s - status      
  <li>d - date number
  <li>l - length of data
  <li>n - name
  </ul>

  Example:
  <pre>
  fred.t(1)={'03-22-2000 17:02:28.700986000'};
  fred.v(1)=0.0718;
  fred.s(228)={''};
  ...
  fred.t(228)={'03-22-2000 17:10:10.231108000;'};
  fred.v(228)=nan;
  fred.s(228)={'Archive_Off'};
  ...
  fred.d=datenum(char(fred.t));
  fred.l=size(fred.v,2);
  fred.n='fred';
  </pre>

  The t field contains the full time information from the archive.
  This can rarely be used in Matlab as is, however,
  so it's converted into a Matlab
  date/time number (supported since at least MatLab V.4.2).
  <br>
  The l and n fields allow the definition of generic Matlab functions,
  see the following example.

  <h2>Generic use in Matlab</h2>
  This is one example of a generic function that plots the
  data of a channel over time:
  <pre>
     function archdataplot(data)
     % archdataplot(data)
     %
     % 2D plot of data as generated by mldump.pl
     %

     plot(data.d, data.v);
     datetick('x');
     l=max(size(data.d));
     xlabel([datestr(data.d(1)) ' - ' datestr(data.d(l))]);
     title(data.n);
  </pre>


  <h2>Examples</h2>

  The Matlab manuals are full of examples for plotting
  data.
  Here are two examples, over time more might evolve
  and be supplied in ChannelArchiver/Matlab:<br>
  
  <img src=demo3.gif width=586 height=517>
  <img src=demo5.gif width=558 height=396>


  <h2>Design Decisions</h2>
  There are several options for exporting data to Matlab.

  The most interesting part is the handling of time/date.

  From what I understand, Chris Larrieu @ JLab implemented this
  format:
  <pre>
     start, end time  - string

     channel data: one array for the values,
                   another array with a normalized time number, meaning:
                   0.0  == start time
                   1.0  == end time.
  </pre>

  This format is most compact and very quick to import,
  especially when directly generating binary Matlab files.
  <br>
  
  Drawback:<br>
  It's not trivial to get the 'real' time stamp for a value.
  The meaning of a time 'x.y' depends on the chosen start and end time.
  Time values from different exports are not comparable without
  translation, so correlation between channels is difficult.
  <br>
  -> The ChannelArchiver tools export the full time stamp as a string.
   Matlab date/time numbers are used for plotting.

</blockquote>
</body>
</html>
