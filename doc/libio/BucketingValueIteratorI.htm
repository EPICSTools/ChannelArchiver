<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<link REL="STYLESHEET" HREF="../style.css" TYPE="text/css">
<BLOCKQUOTE>
<H1><A NAME=Main>BucketingValueIteratorI Class</A></H1>

A <A HREF="ValueIterator.htm#Main">ValueIterator</A> that performs bucketing data reduction.
<p>
For any set of values within a certain deltaT (the bucket)
at most 4 values are returned (first, min, max and last).
<p>
When <I>next()/prev()</I> is called
this specialization of a <A HREF="ValueIteratorI.htm#Main">ValueIteratorI</A>
will move to the next/previous <A HREF="Value.htm#Main">Value</A>
as defined by the bucketing algorithm.
<p>
Data reduction is not possible between <em>Info</em> values
line <tt>Archive Off</tt> or <tt>Disabled</tt>.
When such an info value is hit,
the iterator will return the info value.
<p>
<b>Up to now, the <em>BucketingValueIteratorI</em> is not capable of going 
backwards! For now it will throw an exception if <em>prev()</em> is called.</b>
<p>
The <em>BucketingValueIteratorI</em> only works properly for scalar
numeric datatypes.
<H2>Interface</H2>
<UL>
<LI>
Create a BucketingValueIterator
based on a basic <A HREF="AbstractValueIterator.htm#Main">AbstractValueIterator</A>,
preferably a <A HREF="ExpandingValueIterator.htm#Main">ExpandingValueIterator</A>.
<BR>
<I>deltaT</I>: Bucket width.
<PRE>
BucketingValueIteratorI (ValueIteratorI *base, double deltaT);
</PRE>
<LI>
Up to now, <I>prev()</I> will raise an
 <tt>Illegal</tt>-Exception.
<PRE>
bool next ();
bool prev ();
</PRE>
<LI>
This method will return <I>deltaT</I>,
not the original scan period of the underlying
base iterator
<PRE>
double getPeriod () const;
</PRE>
<LI>
In the <em>current</em> bucket, these four values, the
 ControlInfo and the appropriate status and severity are the
 ones we're interested in.
<PRE>
       double _first;
  	double _min;
  	double _max;
  	double _last;
       dbr_short_t _status, _sevr;
       const CtrlInfoI *_ctrlinfo;
</PRE>
<LI>
The <em>bucketing</em> algorithm is based on 2 nested state
 machines.
<PRE>
       enum { S_INIT, S_VALUES, S_OUT } _state;
       enum { V_FIRST, V_MIN, V_MAX, V_LAST, V_NONE } _oval;
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</P>
</BODY>
