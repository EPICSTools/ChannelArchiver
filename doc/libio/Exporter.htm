<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<link REL="STYLESHEET" HREF="../style.css" TYPE="text/css">
<BLOCKQUOTE>
<H1><A NAME=Main>Exporter Class</A></H1>

Exporter is the virtual base class for
tools that export data from a ChannelArchive:
<UL>
<LI><A HREF="SpreadSheetExporter.htm#Main">SpreadSheetExporter</A>
<LI><A HREF="GNUPlotExporter.htm#Main">GNUPlotExporter</A>
<LI><A HREF="MatlabExporter.htm#Main">MatlabExporter</A>
</UL>
<BR>
These classes export the values of selected channels
as text files.
Each derived class generates a slightly different
type of text file for the specific target application.
<H2>Interface</H2>
<UL>
<LI>
All Exporters work on an open Archive.
<I>filename</I> is the (base)name
for the generated file.
When left empty, <I>cout</I> is used.
<BR>
See also: <A HREF="FilenameTool.htm#Main">FilenameTool</A>
<PRE>
   Exporter(ArchiveI *archive);
   Exporter(ArchiveI *archive, const stdString &filename);
</PRE>
<LI>
Allowed number of channels to export
(limited for performance reasons)
<PRE>
   void setMaxChannelCount(size_t limit);
</PRE>
<LI>
Set start/end time. Default: dump from whole archive
<PRE>
   void setStart(const osiTime &start);
   void setEnd(const osiTime &end);
</PRE>
<LI>
Switch on linear interpolation,
generating a value every "secs".
Gaps bigger than "secs * gap" will be
shown as "Archive_Off"
to avoid endless interpolation.
<PRE>
   void setLinearInterpolation(double secs, size_t gap = 0);
</PRE>
<LI>
When using filled values,
missing entries (when the value has not changed since the last entry)
will be filled in by repeating the last value
<PRE>
   void useFilledValues();
</PRE>
<LI>
Generate extra column for each channel
with status information?
<PRE>
   void enableStatusText(bool yesno = true);
</PRE>
<LI>
Export channels that match a name pattern
<PRE>
   void exportMatchingChannels(const stdString &channel_name_pattern);
</PRE>
<LI>
Export channels from provided list
Derived class has to implement this.
The protected members can be used
but it's up to the implementation as to how.
<PRE>
   virtual void exportChannelList(
       const stdVector<stdString> &channel_names) = 0;
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</P>
</BODY>
