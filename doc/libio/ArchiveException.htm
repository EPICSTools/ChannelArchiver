<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<link REL="STYLESHEET" HREF="../style.css" TYPE="text/css">
<BLOCKQUOTE>
<H1><A NAME=Main>ArchiveException Class</A></H1>

Special Exception for ChanArch classes.
<BR>
All Exceptions should be caught by reference
to avoid unnecessary copies and assert deallocation:
<PRE>
try
{
	... throwArchiveException (Invalid);
}
catch (const ArchiveException &e)
{
	LOG_MSG ("%s\n", e.what ());
}
</PRE>
<BR>
ArchiveException is based on Tools::GenericException
which - on systems where it's properly defined - is
in turn based on std::exception.
<H2>Interface</H2>
<UL>
<LI>
Instead of using this constructor the predefined
macro <I>throwArchiveException(code)</I> should be used.
<PRE>
ArchiveException (const char *sourcefile, size_t line, Code code)
: GenericException(sourcefile, line), _code (code)
{}
</PRE>
<LI>
Similar, use 
<I>throwDetailedArchiveException(code, info)</I>.
<PRE>
ArchiveException (const char *sourcefile, size_t line, Code code, const stdString &detail)
: GenericException(sourcefile, line), _code (code), _detail (detail)
{}
</PRE>
<LI>
For valid codes see <I>ArchiveException.h</I>.
<PRE>
Code getErrorCode () const;
</PRE>
<LI>
Return detail text (if set)
<PRE>
const stdString &getDetail () const;
</PRE>
<LI>
Returns explanatory text for this exception.
<PRE>
virtual const char *what() const;
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</P>
</BODY>
