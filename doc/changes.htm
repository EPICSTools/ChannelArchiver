<html>

<head>
<base>
<title>Channel Archiver Changes</title>
</head>

<body BGCOLOR="#B0B0FF" BACKGROUND="doc/blueback.jpg">
<font face="Comic Sans MS">

<blockquote>
  <h1>Channel Archiver Changes</h1>
  New "versions" are marked by some additional functionality.
  The "patches" are then used to debug those new things.
  
  <ul>
    <li>07/25/2001<br>
      Patch #4:<br>
      Working on scripting support for Matlab, see casi/matlab/Readme.txt.
      You can already create Matlab command files with most
      of the retrieval tools. But those command/data files are quite
      big if you look at a lot of data.
      Scripting support provides direct access to the data from within
      Matlab. You can e.g. loop over data for a whole year and
      assemble rolling statistics without having the whole year worth
      of data in memory - which would be too much.
      Instead, you look at one value at a time and then go on to the
      next value.
      casi/matlab starts to work: You can list channel names, find a
      channel and value-after-some-time and loop over value.
      But there are no additional examples, the error handling might
      be pretty awful, and the API can still change a lot.
    <li>07/24/2001<br>
      Patch #3:<br>
       <ul>
       <li>Redid the documentation:
           The original docs concentrated on compilation and
	   installation. Now that has been moved down and
	   more emphasis it put on usage, closer to a "user manual".
	   Ben Kruger, a LANL summer student, provided some of the new
	   pages and paragraphs.
       <li>GNUPlotExporter fixes, second round:
           Given a <em>start</em> and <em>end</em> time stamp, the
           GNUPlot exporter will try to come up with values at those
           exact dates so that online plots look nice. The value
           preceding 'start' is copied onto the 'start': OK since we
           archive changes. The previous value is still
           valid. Similarly, the last value before 'end' is duplicated
           with 'end' as a time stamp. Or 'now', if that's earlier.
       <li>CGIExport: will swap start/end time if given in wrong order.
       <li>Use of "precision":
           The ArchiveEngine archives the precision.
	   The original retrieval tools used that precision
	   when formatting values.
	   As it turned out, few of the IOC databases are
	   configured properly, so users complained about the
	   truncated numbers (default is PREC=0, so you saw no
           fractional digits).
	   The early fix was to ignore PREC.
	   But then our BESSY colleagues actually depend on the PREC-driven
	   formatting and had to put the PREC formatting back in.<br>
	   As a compromise, a PREC of zero is now ignored,
	   PREC &gt; 0 is acknowledged.
       </ul>
    <li>07/18/2001<br>
      Patch #2:<br>
       <ul>
       <li>GNUPlotExporter fixes, suggested by Thomas Birke.
           Correct problems with gaps caused by subsequent
	   status values (Archiver off, disconnected, ...).
	   Will now try to show one value at given start and end time
           stamp by mapping the last value before start onto start and
           copying the last value before end onto the end.
       <li>SpreadsheetExporter: Will now show one value before
           and after the given time range.
       </ul>
    <li>06/21/2001<br>
      Patch #1:<br>
       <ul>
       <li>ArchiveEngine: Exploring possible problems
           when writing to a disk that is NFS-mounted.
           Fixed EngineServer, the engine's HTTP server,
           to run on even if the write thread hangs because
           of a NFS disconnect. Top-level engine status page
	   shows if the write thread is writing right now.
       </ul>
    <li>06/07/2001<br>
      <font color="#0000A0">Version 1.8</font>:<br>
       <ul>
       <li>MultiArchive:<br>
           <ul>
           <li>Didn't really handle multiple archives until now.
               Hopefully not too many bugs left.
           <li>No longer investigates all subarchives
	       unless necessary.<br>
	       For find-channel and get-value-after-timestamp
	       this can be skipped -> much faster!<br>
	       When a list of channels and/or times is requested,
	       the sub archives are still queried.
	   </ul>
       <li>GNUPlotExporter:<br>
           <ul>
           <li>Use two Y-axes if exporting excactly two channels
           <li>Can call GNUPlot via pipe, skipping the command-file
               generation
           <li>Use 'steps' instead of 'linespoints'
           <li>Show units in legend
           </ul>
       <li>CGIExport:<br>
           <ul>
           <li>Benefits from new GNUPlotExporter
               (cannot use pipe on Win32).
           <li>Image is now a HREF link to GNUPlot data.
               That's different from the spreadsheet format,
               but might still be useful.
           </ul>
       <li>Engine:<br>
           don't write buffers to disk
           at shutdown because this can take too long.
           After receiving a signal (e.g. on computer shutdown),
           the engine will now stop ASAP.
           The archive contains data up to the previous
           write period.<br>
           New log messages, Web interface shows total number
           of channels and connected channels (suggested by Bob Hall)
       <li>casi:<br>
           Added Bob Hall's python-based archiveBrowser
           to the example scripts.
       </ul>
    <li>04/30/2001<br>
      Patch #6:<br>
       <ul>
       <li>MatlabExporter: channel names which are invalid
           as Matlab variable names (because they include ':')
           are patched with underscores.
       </ul>
    <li>04/17/2001<br>
      Patch #5:<br>
       <ul>
       <li>The "Exporter" had a bug which made the "fill"
           option fail with some small archives (didn't
           find proper first value, displayed nothing as a result).
       <li>Added getDoubleTime() as suggested by Bob Hall (SLAC)
           to casi.
       </ul>
    <li>04/16/2001<br>
      Patch #4:<br>
      The "ExpandingValueIterator" had a bug which made
      the result of ArchiveExport and CGIExport appear
      to go back-in-time, even though the actual archived data
      was fine.
    <li>04/11/2001<br>
      Patch #3:<br>
      These apply to the Exporter classes in LibIO
      as well as ArchiveExport, WinBrowser and CGIExport:
       <ul>
       <li>Removed the "rounding" option from the Exporter
           as well as CGIExport etc.
           because noone (including me) really understood this.
           For Matlab, raw data export is best because you can
           do interpolation in there,
           for the rest filling (staircase) and linear
           is what you get.
       <li>Fixed the exporter's 'fill' option to remove
           the N/A at the start and end:
           When beginning at 1pm and there is no value at 1pm
           but a valid one from 12:55, that value will
           be filled/repeated into the 1pm time slot.<br>
           At the end, channels which are not disconnected
           but also have no new value are repeated to show
           that the last entry is still valid.
       </ul>
    <li>04/10/2001<br>
      Patch #2:<br>
       <ul>
       <li>Cleaned up the HTML TABLE for CGIExport
       <li>shell/file "globs" are now case-independent
           and the CGIExport tool supports them
           since most users don't understand regular expressions.
       </ul>
    <li>04/05/2001<br>
      Patch #1:<br>
       <ul>
       <li>Matlab support for CGIExport,
           redid the CGI interface to make it better looking
           (by definition) and allow space for the Matlab button.
           Also new: An Excel download was added, similar to the
           Spreadsheet download but launching Excel on Win32.
       </ul>
    <li>03/02/2001<br>
      <font color="#0000A0">Version 1.7</font>:<br>
       <ul>
       <li>Moved into the SNS CVS repository:
           <pre>
           Example checkout:
           cvs -d :ext:kasemir@ics-srv01.sns.ornl.gov:/sns/ADE/cvsroot \
              get -d ChannelArchiver epics/supTop/extensions/1.1/src/ChannelArchiver        
           </pre>
       <li>New MatlabExporter class in LibIO
       <li>ArchiveExport and Winbrowser have Matlab option
       </ul>
    <li>03/15/2001<br>
      Patch #3:<br>
       <ul>
       <li>Export class has "fill" option. CGIExport used this,
           now ArchiveExport does so, too.
       </ul>
    <li>02/21/2001<br>
      Patch #2:<br>
       <ul>
       <li>Changed Engine/ScanList to use a list of pointers
           instead of elements to help solve compile problems.
       </ul>
    <li>02/14/2001<br>
      Patch #1:<br>
       <ul>
       <li>Completely removed atac, the tcl-only scripting.
       <li>Engine adds "Archive_Off" on shutdown instead of
           trying to hack this in on restart. Though different
           from the original prototype, this makes more sense to me.
       <li>New config parameter <I>!ignored_future &lt;hours&gt</I>
       <li>On restart, the current value is archived, if necessary
           the time stamp is adjusted.
           Previously, the "current" time stamp of operator input
           channels was likely to be older than the "Archive_Off"
           mark. As a consequence, it wasn't archived.
           This is correct in one way but also confusing for the
           retrieval because you see an old value, then archive off
           and then nothing.
           The new behaviour matches what's happening on
           disable/enable:
           After a re-enable, the current value is written
           with a time stamp that matches the "enabling" event.
       <li>Added MatLab examples to the casi/perl directory.
       </ul>
    <li>01/29/2001<br>
      <font color="#0000A0">Version 1.6</font>:<br>
       <ul>
       <li>Removed atac, the old tcl-only scripting interface.
       <li>Removed namespaces. Though a good idea, Microsoft C++
           is for now the only compiler that implements them and
           actually uses namespaces in the supplied library.
           I should burn the books that told me to use namespaces.
       <li>Engine now ignores stamps which are "in the future",
           compared to the clock of the machine where the engine
           is running.
           This avoids problems since once a channel has logged
           a (bogus) value from the "future",
           you cannot go back-in-time, so you cannot add
           correct values.
           For now the definition of "future" is hardcoded in
           getIgnoredFutureSecs(), Engine/Engine.h.
       <li>Removed ASSERTs in Engine/ChannelInfo, replaced by
           error messages.
       <li>Replaced some usage of std::strbuf with sprintf
           because strbuf's operators caused unexplainable lockup.
           Should remove all strbuf calls.
       <li>The scripting interface CASI now works with perl
           on Linux and Win32.
       </ul>
    <li>11/20/2000<br>
      Patch #1:<br>
      <ul>
      <li>Added "FileSize" switch to ArchiveManager
      <li>Bug (which needs more attention):
          The LOG_MSG utility uses a lock. It's possible
          to deadlock if a LOG_MSG call uses another call
          which in turn (because of an error) tries to call
          LOG_MSG.
          As a quick fix, the calls in CtrlInfoI.cpp are
          removed because they caused problems with
          channels that have invalid enum. values.
          <br>
          If the engine hangs, try to find out where like this:<br>
          Find the PID of the engine. On Linux, you'll see 3 PIDs, pick the
          lowest one. Launch "gdb ArchiveEngine" in Engine/O.Linux
          or wherever the executable is. Then type "attach (PID)".
          Now you can switch threads with "thread 1", "thread 2" etc.
          and use "bt" to see where the thread currently is.
      </ul>
    <li>07/28/2000<br>
      <font color="#0000A0">Version 1.5</font>:<br>
      With the helpful work of Nick Pattengale,
      a summer student at LANSCE-8, LANL,
      <ul>
      <li>the SWIG-based scripting interface has undergone more testing
      <li>simple write support (copy really) has been added
      <li>CArDMiner, a python GUI tool for archive management
          has been added (Nick Pattengale).<br>
          Later additions might make CArDMiner live up to its name
          and turn it into a real "data mining" tool.
          For now it can be used as a replacement for the command-line
          ArchiveManager tool:<br>
          extract subarchives, repair/remove invalid entries.<br>
          While certainly slower than a compiled program,
          it is much easier to extend,
          which is useful since "broken" archives
          are usually broken in a way not anticipated,
          hence not considered in a compiled program.
          CArDMiner allows to apply "snippets" of python code
          to the channels/values being copied,
          which are much quicker to write/modify than
          a complete code/recompile/install cycle for
          the ArchiveManager would be.<br>
      </ul>

    <li>07/24/2000<br>
      Patch #3:<br>
      Investigated performace differences on Win32 and Linux,
      allow LowLevelIO to use either fd or FILE pointer.
    <li>07/20/2000<br>
      Patch #2:<br>
      CHAR data type is now supported, treated like a number.
    <li>07/3/2000<br>
      Patch #1:<br>
      <ul>
      <li>New doc/libio/Layout.htm
      <li>Fixes for SGI, cleaning up signal handling in
          Engine/main.cpp
      </ul>
    <li>06/27/2000<br>
      <font color="#0000A0">Version 1.4</font>:<br>
      <ul>
      <li>Scripting support moved to SWIG,
          replacing the tcl-only ATAC API.
      <li>Scripting allows simple write-access to archive,
          we are working on a python-GUI for archive management
      </ul>
    <li>06/26/2000<br>
        Patch# 6:<br>
        Engine: used 1 month as file default, not 24h<br>
        Engine: more thread safe signal catching<br>
        HTTPServer: Empty client would linger open and
                    cause Engine to hang.
                    Those could be cause by keeping the
                    "Reload" button down in the web browser.
                    How those connections are closed.
                    Hammering the HTTPServer does still
                    consume CPU up to the point were the 
                    WriteThread cannot run,
                    so overwrites can occur.
                    But things should be fine afterwards.
                    The best solution might be a seperate,
                    lower-priority thread for the HTTPServer.
                    This is put off for now.<br>
        LibIO/Bin*: replace stdio by low level IO
                    (open/read/write)
                    to track down thread-related problems.<br>
    <li>06/14/2000<br>
                Patch# 5:<br>
                Testing: SWIG for scripting interface,<br>
                replacing ATAC with CASI - "Channel Archiver Scripting Interface"<br>
                Currently: ported tcl scripts to slightly different API,
                creating python support.<br>
    <li>06/02/2000<br>
                Patches:<br>
                More careful checking for "MultiArchive" master file.<br>
                Other fixes to help Chris Larrieu compile with some HPUX compiler:
                Overlooked namespace std issues, rdbuf()->freeze().
    <li>05/25/2000<br>
                Patches:<br>
                Optional namespace std,<br>
                removed nested class definition for LibIO/CtrlInfoI.
    <li>05/04/2000<br>
      <font color="#0000A0">Version 1.3</font>:<br>
      <ul>
        <LI>"MultiArchive" can read more than one archive,
            easing the previous housekeeping problems:
            ArchiveEngine can now be restarted e.g. monthly,
            creating easier to manage subarchives
            which can still be viewed as a whole via the MultiArchive.
        <LI>Central ArchiverConfig.h file for sources under
            ChannelArchiver directory,
            allowing compile-time configuration of Engine, Manager,
            CGIExport, ... in one place.
        <LI>WinBrowser (and Exporter class) can export linear
            interpolated spreadsheet data.
        <LI>Adjustments for hp700 at BESSY
        <LI>TCL examples: better response to window resize.
      </ul>
      </LI>
    <li>03/23/2000<br>
      <font color="#0000A0">Version 1.2</font>:<br>
      Optional password for stopping the ArchiveEngine over the Web,
      to be configured via Engine/Config.h.<br>
      TCL example: PlotBrowser.tk</li>
    <li>03/01/2000<br>
      <font color="#0000A0">Version 1.1</font>:<br>
      More documentation about Engine, Manager, ATAC.<br>
      ArchiveManager can read/write ASCII files.<br>
      (for repairing archives the hard way)<br>
      <a href="doc/atac/default.htm">atac</a> allows to read arrays, more example tcl/tk scripts
      to list channels, dump values, browse values in a list box or do X-Y-Plots. </li>
    <li>02/09/2000<br>
      Intruduced version/release scheme to better keep track of changes since the software is no
      longer only at LANL.<br>
      First Release, <font color="#0000A0">Version 1.0</font>.<br>
      Fixed memory leak on RedHat 6.x (should appear on all systems that use that version of
      egcs) by replacing std::string with self-written stdString, maintaining API.<br>
      Fixed CtrlInfo size problem for compatibility with wrong size calculation of original
      engine. </li>
    <li>01/28/2000<br>
      CGIExport: support for retrieving status info and &quot;filled&quot; export where
      unchanged values are repeated; channel list and channel information are now sorted.<br>
      ATAC: Scalar access to data; allows to create e.g. beam statistics with plot.<br>
      WinBrowser: Fixed axis plotting code.</li>
    <li>12/18/1999<br>
      I/O Library: Split pure interface classes from the actual
      implementation for the original, binary data file format. This
      will now allow the independent developement of other data file
      formats. <br>
      ATAC: Started TCL interface to the I/O library.
    <li>11/08/1999<br>
      The Archive Engine is now multithreaded.<br>
      Fixes as a result of Test run on LEDA at LANL.<br>
      In a test setup the Engine ran fine until the disk got full (PC,
      original configuration files from LEDA, ca. 1200 channels every
      30 secs, free disk space of 200MB used after 5-7 days).
      Switched to/added standard EPICS make system Makefiles.
    <li>10/18/1999<br>
      Profiled &amp; enhanced engine:<br>
      Reduced #of disk accesses.
    <li>9/24/1999<br>
      No warnings left with MS VC++ or g++ (egcs-2.91.66) except for
      Tools/gnu_regex.c (only needed for Win32).<br>
      Eliminated calls to string::copy to make it work on RedHat 5.2.<br>
      Some changes to the Engine to improve performance at higher rate
      of incoming values.
    <li>9/15/1999<br>
      The new archive engine can read the config files that we use on
      LEDA and even does some of what's written in there. It does
      handle disabling channels and creates new data files, e.g. one
      per day. The web interface is still simple and on a fixed port
      (4812), but already shows status information for the engine,
      groups, channels, and allows adding channels to groups (not
      permanent, though).<br>

      The IO-library has only a few warnings left when compiled with
      egcs (no warnings with MS VC). Several bugs have been
      eliminated. I'm pretty sure that the sequential readout part can
      stay as it is, buffered read might also be OK. The write portion
      is likely to change while I'm still working on the engine. As
      soon as the engine is believed to be stable enough so that I can
      run it in parallel to the old engine I'll 'freeze' the
      IO-library by actually building it as a library. I might also
      need a more sophisticated version number scheme then.
    <li>6/28/1999<br>
      Compiles on Solaris with egcs
    <li>6/25/1999<br>
      The Archive class now takes a full pathname (with '/' or '\' on
      Win32, Unix paths with '/' only) and opens data files in that
      directory without calling chdir but generating the appropriate
      names. Thus you can now open more than one Archive.
  </ul>
  <hr>
  <a HREF="mailto:kasemir@lanl.gov"><p>-Kay (kasemir@lanl.gov)</a></p>
</blockquote>
</font>
</body>
</html>

