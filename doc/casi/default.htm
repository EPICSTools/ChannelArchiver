<html>

<head>
<title>CASI</title>
<link REL="STYLESHEET" HREF="../style.css" TYPE="text/css">
</head>

<body BGCOLOR="#B0B0FF" BACKGROUND="../blueback.jpg">

<blockquote>
  <h1><I>CASI</I> - Channel Archive Scripting Interface</h1>
  This is a SWIG-based scripting interface to the
  ChannelArchiver I/O library.<br>
  (It replaces the previous, TCL-only "ATAC" extension)
    
  <h2>SWIG, tcl, perl, python</h2>
  SWIG generates the glue code to get from a C/C++ library,
  in this case the ChannelArchiver I/O library,
  to a scripting language like perl, python, ...
  <br>
  So far supported:
  <ul>
  <li>python
  <li>perl
  <li>tcl
  </ul>
  There are example scripts, some using tk, BLT, Pmw.
  Originally only tcl was supported because it provides
  cross-platform portablility for GUI programming.
  Personally I find python is a better language than tcl
  for calculation and writing reusable modules.
  It also turns out to have the same or even better support
  for tk & BLT.
  Perl is certainly a good pick for text processing.
  
  <h2>Setup</h2>
  Details on building casi as well as how to install python
  and useful extensions are in the Readme.htm file in
  the casi source directory.<br>
  On Unix systems, the scripting languages like python
  can be installed in /usr/bin, /usr/local/bin or ...

  Vladimir Sirotenko suggested using 
  <pre>
  #! /bin/env python
  </pre>
  to keep the scripts independent from installation details.
  This means they run as long a python is in your PATH.
  This doesn't work in all cases, though.
  It is also a security hole if someone sneaks a fake python
  in your PATH.
  On Windows, .py files are usually associated with python,
  .pl can be bound to perl etc., the shebang is ignored.
  <br>
  On Unix you might have to set LD_LIBRARY_PATH
  to include the casi shared libraries as well as
  the EPICS base libraries.
  For Win32, the EPICS base DLLs (ca, Com, Db) have
  to be in PATH.
  <br>
  The python scripts use some means of
  <em>rootwidget.option_readfile ('optionDB')</em>
  so that the colors and fonts can be adjusted globally.

  <h2>Usage</h2>
  Again, details are in the Readme.htm file in
  the casi source directory.<br>
  The scripting tcl and python syntax closely reflect the C++
  class hierarchy of the ChannelArchiver
  <a href="../libio/default.htm">I/O library.</a>
  There are  SWIG-generated decriptions for
  <a href="perlcasi.htm">perl</a>, 
  <a href="pythoncasi.htm">python</a>, and
  <a href="tclcasi.htm">tcl</a>.

  <h2>Example Scripts</h2>
  While most are available for python and tcl with very
  similar functionality, this concentrates on the python ones
  because of their cleaner syntax.
  <br>
  The script casi/python/101.py shows the most basic
  way to dump all values for a given channel:
<pre>import casiTools, casi
archiveName, channelName=("../../Engine/Test/freq_directory","fred")
archive = casi.archive()
channel = casi.channel()
value   = casi.value()
archive.open (archiveName)
archive.findChannelByName (channelName, channel)
channel.getFirstValue (value)
while value.valid():
    print casiTools.formatValue (value)
    value.next()</pre>

  Other examples that are worth looking at:
  <ul>
  <li>dump.py: better version of the simple 101 example
  <li>ChannelInfo.py, ListChannels.py: GUI channel name lister
  <li><a href="listbrowser.htm">ListBrowser</a>
  <li>Cardminer: Meant to replace ArchiveManager<br>
      Allows interactive extraction/repair of binary
      archive data files.
  <li>Plot.py: Example for plotting
  <li><a href="xyplot.htm">X/Y-Plot</a>
  <li><a href="leda.htm">Web-Page Generation</a>
  </ul>    
  Please note that most of them can be run directly from 
  the command line as well as called from other python scripts.

</blockquote>
</body>
</html>












