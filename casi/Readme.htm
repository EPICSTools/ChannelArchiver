<html>

<head>
<title>CASI</title>
<link REL="STYLESHEET" HREF="../doc/style.css" TYPE="text/css">
</head>

<body BGCOLOR="#B0B0FF" BACKGROUND="../doc/blueback.jpg">

<blockquote>
  <h1><I>CASI</I> - Channel Archive Scripting Interface</h1>
  See <a href="../doc/casi/default.htm">doc/casi/default.htm</a>
  on how to use this SWIG-based scripting interface to the
  ChannelArchiver I/O library.
    
  <h2>Compilation</h2>
  This extension is not built as part of the standard make system
  because it involves too many other tools that are not yet uniformly
  configurable as part of the EPICS make system.
  <br>
  Instead, there is a <a href="Makefile.WIN32">Makefile.WIN32</a> for
  MS Visual C++'s &quot;nmake&quot; and a
  <a href="Makefile.Unix">Makefile.Unix</a> for Unix' gnumake.
  <p>
  Check the Makefiles for the possible targets like "perl", "python",
  ...
  For each CASI target, the corresponding scripting language
  has to be installed. In addition, SWIG is needed.
  The <A HREF="Readme.txt">Readme.txt<A> file shows what I learned
  about getting those to work.
  <br>
  In general, this is the suggested procedure:
  <ul>
  <li>First, build the other portions of the ChannelArchiver:<br>
      Tools, LibIO, Engine, ...
  <li>Verify that swig is installed, if necessary get it:
      <a href="http://www.swig.org">www.swig.org</a>
  <li>Make sure that you have the tools that you intend to build this
      extension for:
      tcl/tk, python, ... and know where their includes and libraries are.<br>
      (Hint: For RedHat Linux, this means you not only need to have
      python installed but also the &quot;developer&quot; RPM for python)
  <li>Adjust Makefile.xxx to point to the correct path names for EPICS base,
      swig, tcl, python, ...
  <li>Call gnumake/nmake on your makefile, maybe specifying only the targets
      &quot;perl&quot; or &quot;python&quot; to skip building what you
      don't need.
  </ul>
  SWIG was used to avoid platform dependencies. This also means that
  you have to check the swig manual first in case of errors. Link
  errors for building the shared modules are the most likely problem,
  but except for the swig manual and your system docs you're on
  your own with that...

  <h2>Usage with any scripting language</h2>
  The CASI software is one shared library each for python, tcl or
  perl, e.g. ChannelArchiver/casi/perl/O.Linux/casi.so.
  On solaris I was not succesful in building shared C++ libraries,
  so in that case a new tcl or python interpreter is built
  that includes casi (and tk, BLT, ...).
  <br>
  In addition, EPICS base libraries are used (ca, Com, ...).
  <I>IF</I> EPICS base was built with shared libraries, you might have to
  set your search path to include those:
  <pre>
  export LD_LIBRARY_PATH=/home/kasemir/Epics/base/bin/Linux</pre>
  or
  <pre>
  set PATH=s:\Epics\base\bin\WIN32;%PATH%</pre>


  <h2>Usage with Python</h2>
  You'll need python, of course.
  I tried Python 1.5 as it comes with Redhat 6.1.
  It's available for Win32 as well from
  <a href="http://www.python.org">http://www.python.org</a>.
  <br>
  For running the example scripts you also need:
  <ul>
  <li>Tk and BLT. Tk might be part of the python that you get
      initially, BLT is usually not.
      Find it at
      <a href="http://www.scriptics.com">http://www.scriptics.com</a>
      or <a href="http://www.tcltk.com/blt">http://www.tcltk.com/blt</a>.<br>
      Note that you need a version of tk that works with your version
      of python.
      The latest tk might be too new.<br>
      Similar: You need to build BLT for the version of tk that python uses.
  <li>Pmw, the python meta widget library, also from
      <a href="http://www.python.org">www.python.org</a>
  </ul>


  There is a casiTools.py module that imports the casi shared lib.
  For this to work, set PYTHONPATH to include the casi directory
  (where casi.py and casic.dll/so/??? have
  been created in the compilation step), e.g.
  <pre>
  export PYTHONPATH=/home/kasemir/Epics/extensions/src/ChannelArchiver/casi/python/O.Linux</pre>
  or
  <pre>
  set PYTHONPATH=s:\Epics\extensions\src\ChannelArchiver\casi\python\O.WIN32</pre>
  
  <h2>Usage with Perl</h2>
  After building, casi/perl/O.Linux (for Linux) will
  contain a casi.html file. casi/perl/dump.pl shows some very basic
  usage. LD_LIBRARY_PATH has to be set for Linux.
  <br>
  To run the example script on Win32, the EPICS base DLLs have to
  be in the path. The location of the casi.DLL is set in the script.

  <h2>Usage with TCL</h2>
  Python (for GUIs or bigger tasks) or Perl (for text crunching)
  are much better languages than TCL.
  <br>
  Example:
  <pre>
  Python:  a = b + c
  Perl:    $a = $b + $c;
  tcl      set a [ expr $b + $c ]
  </pre>
  If you still believe that you have to use TCL:
  Try building casi for Python first. Then find a tcl that works with
  the tk and BLT versions that Python required.
  <br>
  When you install python binaries for Win32, TCL is usually
  included.
  <p>
  All the TCL/wish examples include casiTools.tcl which in turn
  loads the shared casi library.
  You might have to adjust the code in there to find the location
  of the shared library.

  <h2>Something completely unrelated:</h2>
  <em>If you have time to spare, go by air.</em>
  <br>
  I wrote the initial version of this text on a Delta plane in
  Atlanta, 9/9/2000, around midnight. I was supposed to go from
  Cincinatty to Albuqueque but the flight was canceled. Then the
  replacement flight via Atlanta stopped in the middle of takeof,
  breaking hard, because some "light" in the copckpit went on and now
  they we waited for the maintenance crew to bring a replacement
  module. Finally, another airplane was used. All's well that ends well.
  
</blockquote>
</body>
</html>












