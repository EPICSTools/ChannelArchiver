#!/bin/sh
# -*- tcl -*- \
	exec atac $0 ${1+"$@"}

set installPath "."
source $installPath/casiTools.tcl

proc usage {} {
	global argv0
	puts "USAGE: $argv0 archive channelName \[ endTime \]"
	puts "       endTime as \"YYYY/MM/DD hh:mm:ss\" in 24h format"

	exit 1
}

#################################
# Parse args
#
set argc [ llength $argv ]
if { $argc < 2 } { usage }

set archiveName [ lindex $argv 0 ]
set channelName [ lindex $argv 1 ]
if { $argc > 2 } {
	set endStamp [ lindex $argv 2 ]
} else {
	set endStamp 0
}

#################################
# GUI
#
option add *background #AEC9D2

frame .archivename
label .archivename.lbl -text "Archive:" -width 10
entry .archivename.entry -textvariable archiveName
pack .archivename.lbl -side left
pack .archivename.entry -side right -expand yes -fill x

frame .channelname
label .channelname.lbl -text "Channel:" -width 10
entry .channelname.entry -textvariable channelName
pack .channelname.lbl -side left
pack .channelname.entry -side right -expand yes -fill x

frame .start
label .start.lbl -text "End:" -width 10
entry .start.entry -textvariable endStamp
pack .start.lbl -side left
pack .start.entry -side right -expand yes -fill x

frame .data
listbox .data.time -yscrollcommand ".data.scroll set" -width 30
listbox .data.value -yscrollcommand ".data.scroll set" -width 60
scrollbar .data.scroll -command "yviewBoth"

pack .data.time  -side left -expand no -fill y
pack .data.scroll -side right -expand no -fill y
pack .data.value  -side left -expand yes -fill both
set timeList .data.time
set valueList .data.value

frame .buttons
button .buttons.restart -command "restart" -text "Restart"
button .buttons.info -command "showInfo" -text "Info"
button .buttons.backward -command "backward" -text "<<<"
button .buttons.forward -command "forward" -text ">>>"
button .buttons.exit -command "exit" -text "Exit"
pack .buttons.restart  -side left -padx 0
pack .buttons.info     -side left -padx 0
pack .buttons.backward -side left -padx 10
pack .buttons.forward  -side left -padx 10
pack .buttons.exit     -side right -padx 0

pack .archivename -fill x
pack .channelname -fill x
pack .start -fill x
pack .buttons -fill x -side bottom
pack .data -expand yes -fill both -side top

update

proc yviewBoth { args } {
    eval .data.time yview $args
    eval .data.value yview $args
}

#################################
# insertValue: format value and add to listbox
#
proc insertValue { value where } {
    global timeList valueList
    $timeList insert $where [ $value time ]
    if { [ $value isInfo ] } {
	$valueList insert $where  [ $value status ]
    } else {
	$valueList insert $where  "[ $value text ] [ $value status ]"
    }
}

#################################
# listForward startStamp|0
#
# Add values from "startStamp" into listbox
#
proc listForward { startStamp } {
    global timeList archiveName channelName


    puts "listForward $startStamp"
    set archive [ archive ]
    set channel [ channel ]
    set value   [ value ]

    $archive open $archiveName
    $archive findChannelByName $channelName $channel
    if { ! [ $channel valid ] } {
	error "$channelName: not found"
	exit 1
    }
    
    if { $startStamp > 0 } {
	$channel getValueAfterTime $startStamp $value
	# Skip the value that we already have:
	if { [ $value valid ] } { $value next }
    } else {
	$channel getFirstValue $value
    }
    
    set count [ $timeList cget -height ]
    while { [ $value valid ]  &&  $count > 0 } {
	insertValue $value end
	$value next
	incr count -1
    }

    rename $value {}
    rename $channel {}
    rename $archive {}
}
    
#################################
# listBackward endStamp|0
#
# Add values before "endStamp" into listbox
#
proc listBackward { endStamp } {
    global timeList archiveName channelName
    
    puts "listBackward  $endStamp"
    set archive [ archive ]
    set channel [ channel ]
    set value   [ value ]

    $archive open $archiveName
    $archive findChannelByName $channelName $channel
    if { ! [ $channel valid ] } {
	error "$channelName: not found"
	exit 1
    }
    
    if { $endStamp > 0 } {
	$channel getValueAfterTime $endStamp $value
	# Skip the value that we already have:
	if { [ $value valid ] } { $value prev }
    } else {
	$channel getLastValue $value
    }
    
    set count [ $timeList cget -height ]
    while { [ $value valid ]  &&  $count > 0 } {
	insertValue $value 0
	$value prev
	incr count -1
    }

    rename $value {}
    rename $channel {}
    rename $archive {}
}

#################################
#	Button-procedures
#
proc showInfo {} {
    global archiveName channelName
    createChannelInfo $archiveName $channelName
}

proc forward {} {
    global timeList valueList
    
    set startStamp [$timeList get end]
	listForward $startStamp
    $timeList see end
    $valueList see end
}

proc backward {} {
    global timeList valueList
    
    set endStamp [$timeList get 0]
    listBackward $endStamp
    $timeList see 0
    $valueList see 0
}

proc restart {} {
    global timeList valueList endStamp
    $timeList delete 0 end
    $valueList delete 0 end
    listBackward $endStamp
}

showCasiNag
restart


