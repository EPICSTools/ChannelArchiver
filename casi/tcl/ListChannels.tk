#!/bin/sh
# -*- tcl -*- \
	exec atac $0 ${1+"$@"}

# --------------------------------------------------------
# $Id$
#
# Please refer to NOTICE.txt,
# included as part of this distribution,
# for legal information.
#
# Kay-Uwe Kasemir, kasemir@lanl.gov
# --------------------------------------------------------

# List all channel names in a list-box
#

set installPath "."
source $installPath/casiTools.tcl

proc usage {} {
	global argv0

	puts "USAGE: $argv0 archive \[ channelPattern \]"
	exit 1
}

#################################
# Parse args
#    
set argc [ llength $argv ]
if { $argc < 1 } { usage }

set archiveName [ lindex $argv 0 ]
if { $argc > 1 } {
	set channelPattern [ lindex $argv 1 ]
} else {
	set channelPattern ""
}

#################################
# GUI
#  
option add *background #AEC9D2 

frame .archivename
label .archivename.lbl -text "Archive:" -width 20
entry .archivename.entry -textvariable archiveName -width 40
pack .archivename.lbl -side left
pack .archivename.entry -side right -expand yes -fill x

frame .channelpattern
label .channelpattern.lbl -text "Channel Pattern:" -width 20
entry .channelpattern.entry -textvariable channelPattern -width 40
pack .channelpattern.lbl -side left
pack .channelpattern.entry -side right -expand yes -fill x

frame .names
listbox .names.list -yscrollcommand ".names.scroll set" -width 30 -height 20
scrollbar .names.scroll -command ".names.list yview" 
set namelist ".names.list"
pack .names.scroll -side right -fill y
pack .names.list -side left -expand yes -fill both

frame .buttons
button .buttons.restart -command "showNames" -text "Restart"
button .buttons.exit -command "exit" -text "Exit"
pack .buttons.restart  -side left -padx 0
pack .buttons.exit     -side right -padx 0

pack .archivename -fill x -side top
pack .channelpattern -fill x -side top
pack .buttons -fill x -side bottom
pack .names -expand yes -fill both -side top

update                               

#################################

proc showNames {} {
	global archiveName channelPattern namelist

	if { [ $namelist size ] > 0 } {
		$namelist delete 0 end
	}
	$namelist insert end "Please wait, reading channels..."
	update                               

	# Get list of channels into "channels"
	set archive [ archive ]
	set channel [ channel ]

	$archive open $archiveName
	$archive findChannelByPattern $channelPattern $channel
	while { [ $channel valid ] } {
		lappend channels [ $channel name ]
		$channel next
	}

	rename $channel {}
	rename $archive {}

	# clear listbox, instet channels after sorting
	$namelist delete 0 end
	eval $namelist insert end [ lsort -dictionary $channels ]
}

showNames

